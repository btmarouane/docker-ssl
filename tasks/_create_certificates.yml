- name: 'Check host DNS presence'
  assert:
    that:
      - host_dns is defined
    fail_msg: "host_dns needs to be set for the role to work "
    success_msg: "Required variable host_dns is defined"

- name: 'Check host address presence'
  assert:
    that:
      - host_addr is defined
    fail_msg: "host_addr needs to be set for the role to work "
    success_msg: "Required variable host_addr is defined"

- name: Create General Certificates directory for both control and target
  delegate_to: "{{item}}"
  with_items:
    - localhost
    - "{{host_dns}}"
  file:
    path: "{{certdir}}"
    owner: ansible
    group: ansible
    state: directory

- name: Create temp directory for both control and target
  delegate_to: "{{item}}"
  with_items:
    - localhost
    - "{{host_dns}}"
  file:
    path: "{{certdir}}/temp"
    owner: ansible
    group: ansible
    state: directory

- name: Create passphrase file
  delegate_to: "{{item}}"
  with_items:
    - localhost
    - "{{host_dns}}"
  copy:
    dest: "{{passphrase_file}}"
    content: "{{passphrase}}"

- name: Generate CA private key
  connection: local
  delegate_to: localhost
  community.crypto.openssl_privatekey:
    passphrase: "{{passphrase}}"
    cipher: aes256
    size: 4096
    path: "{{certdir}}/ca-key.pem"
    mode: 0400
    owner: ansible
    group: ansible

- name: Generate CA
  connection: local
  delegate_to: localhost
  command: "openssl req -new -x509 -days 365 -key {{ certdir }}/ca-key.pem -sha256 -out {{ certdir }}/ca.pem -passin file:{{ passphrase_file }} -subj '/C={{ country_name }}/ST={{state_name }}>/L={{ locality }}/O={{ organization_name }}/CN={{ host_dns }}'"

- name: Set file permissions
  connection: local
  delegate_to: localhost
  file:
    path: "{{ certdir }}/{{ item }}"
    mode: 0444
    owner: ansible
    group: ansible
  with_items:
    - ca.pem
    - ca-key.pem

- name: Generate server private key
  community.crypto.openssl_privatekey:
    size: 4096
    path: "{{certdir}}/server-key.pem"
    mode: 0400
    owner: ansible
    group: ansible

- name: Generate server csr
  openssl_csr:
    privatekey_path: "{{certdir}}/server-key.pem"
    digest: sha256
    path: "{{certdir}}/server.csr"
    subject_alt_name: "DNS:{{host_dns}},IP:{{host_addr}},IP:127.0.0.1"
    extendedKeyUsage: 'serverAuth'
    subject:
      CN: "{{host_dns}}"
    mode: 0400
    owner: ansible
    group: ansible

- name: Pull server csr
  fetch:
    src: "{{certdir}}/server.csr"
    dest: "{{certdir}}/server.csr"
    flat: true

- name: Sign server csr with CA key
  connection: local
  delegate_to: localhost
  community.crypto.x509_certificate:
    path: "{{certdir}}/server-cert.pem"
    ownca_privatekey_path: "{{certdir}}/ca-key.pem"
    csr_path: "{{certdir}}/server.csr"
    ownca_path: "{{certdir}}/ca.pem"
    provider: ownca
    mode: 0400
    owner: ansible
    group: ansible

- name: Generate client key
  connection: local
  delegate_to: localhost
  community.crypto.openssl_privatekey:
    size: 4096
    path: "{{certdir}}/key.pem"
    mode: 0400
    owner: ansible
    group: ansible

- name: Generate client csr
  connection: local
  delegate_to: localhost
  openssl_csr:
    privatekey_path: "{{certdir}}/key.pem"
    path: "{{certdir}}/client.csr"
    extendedKeyUsage: 'clientAuth'
    subject:
      CN: client
    mode: 0400
    owner: ansible
    group: ansible

- name: Sign client csr with CA key
  connection: local
  delegate_to: localhost
  community.crypto.x509_certificate:
    path: "{{certdir}}/cert.pem"
    ownca_privatekey_path: "{{certdir}}/ca-key.pem"
    csr_path: "{{certdir}}/client.csr"
    ownca_path: "{{certdir}}/ca.pem"
    provider: ownca
    mode: 0400
    owner: ansible
    group: ansible